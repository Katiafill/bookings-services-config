server.port: 8083
spring:
  jpa:
    hibernate:
      ddl-auto: none
    database: POSTGRESQL
    show-sql: true
    open-in-view: false

  datasource:
    driver-class-name: org.postgresql.Driver
    platform: postgres
    url: jdbc:postgresql://${DATABASE_SERVER:localhost:5432/demo}

  cloud:
    loadbalancer:
      ribbon:
        enabled: false
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://keycloak:8080/realms/bookings-realm
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs

jwt:
  claimResourceAccess: resource-access
  claimRealmName: bookings
  claimRoles: roles
  prefixRole: ROLE_

eureka:
  instance:
    preferIpAddress: true
  client:
    registerWithEureka: true
    fetchRegistry: true
    serviceUrl:
      defaultZone: ${EUREKA_SERVER:http://localhost:8070/eureka}

management:
  endpoints:
    web:
      exposure:
        include: "*"
    enabled-by-default: true

keycloak:
  realm: bookings-realm
  auth-server-url: http://keycloak:8080
  resource: bookings
  credentials.secret: oIJWEXdysUxUAhGmdnNoFseum78PDSll
  ssl-required: external
  use-resource-role-mappings: true
  bearer-only: true

token:
  converter:
    principal-attribute: preferred_username
    resource-id: bookings

